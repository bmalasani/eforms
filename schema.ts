/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/forms/{formId}": {
    get: operations["getFormByFormId"];
    post: operations["updateForm"];
  };
  "/forms": {
    get: operations["listForms"];
    post: operations["newForm"];
  };
  "/requests/{requestId}": {
    get: operations["getRequestByRequrestId"];
    post: operations["newRequest"];
  };
  "/requests/{requestId}/{action}": {
    post: operations["newRequest"];
  };
  "/requests": {
    get: operations["listRequests"];
    post: operations["newRequest"];
  };
  "/user/{alias}": {
    get: operations["getUserByAlias"];
  };
  "/stats/{alias}": {
    get: operations["getStatsByAlias"];
  };
  "/lookups/{lookup}": {
    get: operations["getLookupsTable"];
    post: operations["newLookuptable"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Form: {
      formId?: string;
      formName?: string;
      formGroup?: string;
      allowedDepartments?: (string)[];
      isActive?: boolean;
    };
    WorkFlow: {
      approverLevel?: "Requestor" | "Reviewer" | "DepartmentApprover" | "FunctionalApprover" | "ActionTaker";
      approver?: string;
      approverDelegate?: (string)[];
      approverComments?: string;
      autoApproval?: boolean;
      includeAttachments?: boolean;
      disableNotification?: boolean;
    };
    FormNotification: {
      subject?: string;
      additionalReceipients?: string;
    };
    FeildStructure: {
      feildId?: string;
      label?: string;
      /**
       * @enum {string}
       */
      type?: "text" | "radio" | "check";
      value?: Record<string, never>;
      validations?: (string)[];
      defaultValue?: Record<string, never>;
      order?: number;
      style?: Record<string, never>;
    };
    FormDetail: {
      core?: components["schemas"]["Form"];
      formWorkFlow?: (components["schemas"]["WorkFlow"])[];
      formWorkNotification?: components["schemas"]["FormNotification"];
      formDetails?: (components["schemas"]["FeildStructure"])[];
      /**
       * @example Smith
       */
      activeTill?: string;
      /**
       * @example Smith
       */
      submitterMessage?: string;
      /**
       * @example Smith
       */
      approverMessage?: string;
      /**
       * @example Smith
       */
      compeletedMessage?: string;
    };
    RequestDetail: {
      requestId?: string;
      form?: components["schemas"]["Form"];
      requestWorkFlow?: (components["schemas"]["WorkFlow"])[];
      requestDetails?: (components["schemas"]["FeildStructure"])[];
    };
    LookupDetails: {
      lookupId?: string;
      lookupTableName?: string;
      data?: (Record<string, never>)[];
    };
    User: {
      /**
       * @example John78
       */
      username?: string;
      /**
       * @example John
       */
      firstName?: string;
      /**
       * @example Smith
       */
      lastName?: string;
      /**
       * @example Smith
       */
      managerName?: string;
      /**
       * Format: email 
       */
      email?: string;
      department?: string;
      position?: string;
      mobile?: string;
    };
    Stats: {
      requests?: number;
      approvals?: number;
      actions?: number;
      drafts?: number;
    };
    Error: {
      errorId?: string;
      errorMessage?: string;
      help?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  getFormByFormId: {
    parameters: {
      path: {
        formId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FormDetail"];
        };
      };
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  updateForm: {
    parameters: {
      path: {
        formId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FormDetail"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FormDetail"];
        };
      };
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  listForms: {
    parameters?: {
      query?: {
        order_by?: string;
        page_token?: string;
        q?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            next_page?: string;
            forms?: (components["schemas"]["Form"])[];
          };
        };
      };
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  newForm: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FormDetail"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FormDetail"];
        };
      };
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  getRequestByRequrestId: {
    parameters: {
      path: {
        requestId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RequestDetail"];
        };
      };
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  newRequest: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RequestDetail"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RequestDetail"];
        };
      };
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  listRequests: {
    parameters?: {
      query?: {
        order_by?: string;
        page_token?: string;
        q?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            next_page?: string;
            requests?: (components["schemas"]["RequestDetail"])[];
          };
        };
      };
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  getUserByAlias: {
    parameters: {
      path: {
        alias: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  getStatsByAlias: {
    parameters: {
      path: {
        alias: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Stats"];
        };
      };
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  getLookupsTable: {
    parameters: {
      path: {
        lookup: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LookupDetails"];
        };
      };
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  newLookuptable: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LookupDetails"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LookupDetails"];
        };
      };
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}
